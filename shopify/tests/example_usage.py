#!/usr/bin/env python3
"""
Ejemplo de uso de la librer√≠a Shopify con soporte para m√∫ltiples agentes.

Este archivo demuestra c√≥mo usar la librer√≠a modificada para trabajar
tanto con Emilia como con Emma sin romper la compatibilidad existente.
"""

from shopify import ShopifyAPI, ShopifyOrders, ShopifyProducts
from shopify import StorefrontAPI, StorefrontSearch

def test_emilia_compatibility():
    """
    Prueba la compatibilidad hacia atr√°s para Emilia.
    El c√≥digo existente deber√≠a funcionar sin cambios.
    """
    print("=== Testando compatibilidad con Emilia (c√≥digo existente) ===")
    
    try:
        # Estos son los usos EXACTOS que ya existen en el c√≥digo de Emilia
        api = ShopifyAPI()
        orders_api = ShopifyOrders()
        products_api = ShopifyProducts()
        storefront_api = StorefrontAPI()
        search_api = StorefrontSearch()
        
        print("‚úÖ Todas las clases se inicializaron correctamente para Emilia")
        print(f"   - GraphQL API URL: {api.graphql_url}")
        print(f"   - Storefront API URL: {storefront_api.graphql_url}")
        
    except Exception as e:
        print(f"‚ùå Error en compatibilidad con Emilia: {e}")

def test_emma_support():
    """
    Prueba el nuevo soporte para Emma.
    """
    print("\n=== Testando nuevo soporte para Emma ===")
    
    try:
        # Nuevo uso para Emma - simplemente agregando agent="emma"
        api = ShopifyAPI(agent="emma")
        orders_api = ShopifyOrders(agent="emma")
        products_api = ShopifyProducts(agent="emma")
        storefront_api = StorefrontAPI(agent="emma")
        search_api = StorefrontSearch(agent="emma")
        
        print("‚úÖ Todas las clases se inicializaron correctamente para Emma")
        print(f"   - GraphQL API URL: {api.graphql_url}")
        print(f"   - Storefront API URL: {storefront_api.graphql_url}")
        
    except Exception as e:
        print(f"‚ùå Error en soporte para Emma: {e}")

def test_mixed_usage():
    """
    Prueba el uso mixto de ambos agentes en la misma aplicaci√≥n.
    """
    print("\n=== Testando uso mixto de Emilia y Emma ===")
    
    try:
        # Emilia para √≥rdenes
        emilia_orders = ShopifyOrders()  # Default a emilia
        
        # Emma para productos
        emma_products = ShopifyProducts(agent="emma")
        
        # Explicit emilia para storefront
        emilia_storefront = StorefrontAPI(agent="emilia")
        
        print("‚úÖ Uso mixto funcionando correctamente")
        print("   - Emilia √≥rdenes: Configuraci√≥n cargada")
        print("   - Emma productos: Configuraci√≥n cargada")
        print("   - Emilia storefront: Configuraci√≥n cargada")
        
    except Exception as e:
        print(f"‚ùå Error en uso mixto: {e}")

def show_usage_examples():
    """
    Muestra ejemplos de c√≥mo usar la nueva funcionalidad.
    """
    print("\n=== Ejemplos de uso ===")
    
    print("""
# 1. C√≥digo existente de Emilia (SIN CAMBIOS)
api = ShopifyAPI()
orders = ShopifyOrders()
products = ShopifyProducts()

# 2. Nuevo c√≥digo para Emma
api = ShopifyAPI(agent="emma")
orders = ShopifyOrders(agent="emma")
products = ShopifyProducts(agent="emma")

# 3. Uso mixto en la misma aplicaci√≥n
emilia_orders = ShopifyOrders()                    # Emilia
emma_products = ShopifyProducts(agent="emma")      # Emma
emilia_search = StorefrontSearch(agent="emilia")   # Emilia expl√≠cito

# 4. Override manual de credenciales (funciona igual que antes)
api = ShopifyAPI(
    shop_url="custom-shop.myshopify.com",
    api_password="custom-token",
    agent="emma"  # Opcional
)
""")

if __name__ == "__main__":
    print("üß™ Probando la librer√≠a Shopify con soporte multi-agente")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    test_emilia_compatibility()
    test_emma_support()
    test_mixed_usage()
    show_usage_examples()
    
    print("\n" + "=" * 60)
    print("‚ú® Pruebas completadas. La librer√≠a est√° lista para usar con ambos agentes!")
