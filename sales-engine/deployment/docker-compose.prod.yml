# -----------------------------------------------------------------------------
# Docker Compose for PRODUCTION SIMULATION
# -----------------------------------------------------------------------------
# This file is designed to mimic a production environment.
#
# Key Features:
#   - Uses the pre-built production Docker image.
#   - Passes environment variables directly (no .env file).
#   - Connects only to the Cloud SQL Auth Proxy.
#
# Usage:
#   This file is typically used by deployment scripts or CI/CD pipelines.
#   To run manually:
#   docker-compose -f deployment/docker-compose.prod.yml up
#
version: '3.8'

services:
  # The main application service, using the production-ready image
  sales-engine:
    # Use an image from a container registry (e.g., GCR)
    # Replace with your actual image path
    image: gcr.io/${PROJECT_ID}/sales-engine:latest
    container_name: sales-engine-prod
    restart: unless-stopped
    # In production, environment variables are passed directly by the orchestrator
    environment:
      - ENVIRONMENT=production
      - GCP_PROJECT_ID=${PROJECT_ID}
      - DB_HOST=cloud-sql-proxy # The host is the proxy service
      - DB_PORT=5432
      - USE_TEST_ODOO=false  # Ensures we use odoo_prod
      # DB_NAME, DB_USER, DB_PASSWORD will be fetched from Secret Manager
    # Depends on the Cloud SQL proxy to be running
    depends_on:
      - cloud-sql-proxy

  # Cloud SQL Auth Proxy service
  # This is the only way the application connects to the database in production
  cloud-sql-proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.0
    container_name: cloud-sql-proxy-prod
    restart: unless-stopped
    # The command to start the proxy with newer syntax and better SSL handling
    command: /cloud-sql-proxy --address 0.0.0.0 --port 5432 ${PROJECT_ID}:${REGION}:${INSTANCE}
    # In production environment on GCE, the proxy uses the attached service account
    # No credentials file needed when running on GCE with proper service account
    ports:
      - "5432:5432"
