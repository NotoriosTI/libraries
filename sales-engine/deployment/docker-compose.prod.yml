# -----------------------------------------------------------------------------
# Docker Compose for PRODUCTION SIMULATION
# -----------------------------------------------------------------------------
# This file is designed to mimic a production environment.
#
# Key Features:
#   - Uses the pre-built production Docker image.
#   - Passes environment variables directly (no .env file).
#   - Connects to the shared Cloud SQL Auth Proxy.
#
# Usage:
#   This file is typically used by deployment scripts or CI/CD pipelines.
#   To run manually:
#   docker-compose -f deployment/docker-compose.prod.yml up
#
# IMPORTANT: This service requires the shared-cloud-sql-proxy to be running
# Use the shared proxy from product-engine: docker-compose -f /opt/product-engine/docker-compose.shared-proxy.yml up -d
#
version: '3.8'

services:
  # The main application service, using the production-ready image
  sales-engine:
    # Use an image from a container registry (e.g., GCR)
    # Replace with your actual image path
    image: gcr.io/${PROJECT_ID}/sales-engine:latest
    container_name: sales-engine-prod
    restart: "no"
    # In production, environment variables are passed directly by the orchestrator
    environment:
      - ENVIRONMENT=production
      - GCP_PROJECT_ID=${PROJECT_ID}
      - DB_HOST=127.0.0.1  # Connect to shared proxy via localhost
      - DB_PORT=5432
      - USE_TEST_ODOO=false  # Ensures we use odoo_prod
      # DB_NAME, DB_USER, DB_PASSWORD will be fetched from Secret Manager
    # Use host network for direct access to shared proxy
    network_mode: "host"
    # No depends_on needed since we use host networking and shared proxy runs separately
