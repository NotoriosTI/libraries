# -----------------------------------------------------------------------------
# Docker Compose for LOCAL DEVELOPMENT with REMOTE TEST DB (Refactored)
# -----------------------------------------------------------------------------
# This file is optimized for running the sales-engine locally while connecting
# to a remote PostgreSQL database (e.g., a test instance) on GCP.
#
# Key Features:
#   - Mounts the local `src` directory for instant code changes (hot-reloading).
#   - Uses the `.env` file from the project root for configuration.
#   - Connects securely to your GCP database via the Cloud SQL Proxy.
#   - Does NOT run a local database container.
#
# Usage:
#   1. Copy `.env.example` to `.env` in the `sales-engine/` root.
#   2. In `.env`, set DB_HOST=cloud-sql-proxy and provide your INSTANCE_CONNECTION_NAME.
#   3. Place your GCP service account key at 'deployment/credentials.json'.
#   4. Run from the `sales-engine/` root directory:
#      docker-compose -f deployment/docker-compose.local.yml up --build
#
services:
  # The main application service for the sales-engine
  sales-engine:
    build:
      # The build context is the root of the sales-engine project
      context: ..
      # The Dockerfile is located in the deployment directory
      dockerfile: ./deployment/Dockerfile
    container_name: sales-engine-local
    # Load environment variables from the .env file at the project root
    env_file:
      - ../.env
    # Mount the local source code into the container.
    # Changes you make in `src/` will be reflected inside the container instantly.
    volumes:
      - ../src:/app/src
    # This service depends on the Cloud SQL Proxy to be healthy before starting.
    # It will wait until the proxy has a stable connection to GCP.
    depends_on:
      cloud-sql-proxy:
        condition: service_healthy
    # A command to install any new dependencies and then keep the container
    # running, so you can `docker exec` into it for tests or manual runs.
    command: >
      bash -c "poetry install && tail -f /dev/null"

  # Cloud SQL Auth Proxy to connect to your remote GCP database.
  cloud-sql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:1.33.2
    container_name: cloud-sql-proxy-local
    # The command uses an environment variable for the instance connection name.
    # Set INSTANCE_CONNECTION_NAME in your .env file.
    command: /cloud_sql_proxy -instances=${INSTANCE_CONNECTION_NAME}=tcp:0.0.0.0:5432
    # Mount your local GCP service account key.
    # Place your key file at 'sales-engine/deployment/credentials.json'.
    volumes:
      - ./credentials.json:/config/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/config/credentials.json
    ports:
      # Exposes the proxy on the default PostgreSQL port for local access if needed.
      - "127.0.0.1:5432:5432"
    healthcheck:
      # This check ensures the proxy is up and listening before the app starts.
      test: ["CMD-SHELL", "nc -z 127.0.0.1 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
