# -----------------------------------------------------------------------------
# Docker Compose for LOCAL DEVELOPMENT
# -----------------------------------------------------------------------------
# This file is optimized for local development and testing.
#
# Key Features:
#   - Mounts local source code for hot-reloading.
#   - Uses an .env file for easy configuration.
#   - Includes services for a local PostgreSQL DB and the Cloud SQL Proxy.
#
# Usage:
#   1. Make a copy of '.env.example' and name it '.env'.
#   2. Fill in the values in the '.env' file.
#   3. Run: docker-compose -f deployment/docker-compose.local.yml up --build
#
version: '3.8'

services:
  # The main application service
  sales-engine:
    build:
      context: ../.. # Build context is the root of the monorepo
      dockerfile: ./sales-engine/deployment/Dockerfile # Path to the Dockerfile
    container_name: sales-engine-local
    # Load environment variables from the .env file in the sales-engine directory
    env_file:
      - ../.env
    # Mount the local source code into the container
    # This allows for hot-reloading of code changes without rebuilding the image.
    volumes:
      - ../src:/app/src
    # Depends on the database and proxy services to start first
    depends_on:
      - db
      - cloud-sql-proxy
    # Use a custom command to install dev dependencies and keep the container running
    command: >
      bash -c "poetry install && tail -f /dev/null"

  # Local PostgreSQL database service
  db:
    image: postgres:14-alpine
    container_name: local-postgres-db
    environment:
      POSTGRES_DB: ${DB_NAME:-sales_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5433:5432" # Expose local DB on port 5433 to avoid conflict with proxy
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-sales_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cloud SQL Auth Proxy service
  # Connects securely to your production Cloud SQL instance
  cloud-sql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:1.33.2
    container_name: cloud-sql-proxy-local
    # The command to start the proxy.
    # Replace the INSTANCE_CONNECTION_NAME with your actual value.
    command: /cloud_sql_proxy -instances=your-project-id:your-region:your-instance-name=tcp:0.0.0.0:5432
    # Mount your local GCP service account key
    # Ensure 'credentials.json' is in your 'deployment' directory
    volumes:
      - ./credentials.json:/config/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/config/credentials.json
    ports:
      - "5432:5432" # Exposes the proxy on the default PostgreSQL port

volumes:
  postgres_data:
    driver: local