#!/usr/bin/env python3
"""
Script de ejemplo para obtener datos de ventas por mes

Demuestra c√≥mo usar DatabaseReader para obtener ventas de todos los SKUs
en un mes espec√≠fico.
"""

import sys
from pathlib import Path
from datetime import date
from calendar import monthrange
import pandas as pd

# Agregar src al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "odoo-api" / "src"))

from sales_engine.db_client import DatabaseReader, get_forecasts_by_month
from odoo_api.warehouses import OdooWarehouse
from config_manager import secrets


def get_sales_by_month(year: int, month: int):
    """
    Obtener ventas de todos los SKUs para un mes espec√≠fico.
    
    Args:
        year (int): A√±o (ej: 2024)
        month (int): Mes (1-12)
    
    Returns:
        pd.DataFrame: Datos de ventas del mes
    """
    # Calcular primer y √∫ltimo d√≠a del mes
    start_date = date(year, month, 1)
    last_day = monthrange(year, month)[1]
    end_date = date(year, month, last_day)
    
    print(f"üìÖ Obteniendo ventas desde {start_date} hasta {end_date}")
    
    reader = DatabaseReader()
    
    return reader.get_sales_data(
        start_date=start_date,
        end_date=end_date
    )


def analyze_month_sales(year: int, month: int):
    """Analizar ventas de un mes espec√≠fico."""
    
    month_names = ['', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                   'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
    
    print(f"\nüîç AN√ÅLISIS DE VENTAS - {month_names[month]} {year}")
    print("=" * 60)
    
    try:
        # Obtener datos de ventas
        sales_data = get_sales_by_month(year, month)
        
        if sales_data.empty:
            print("‚ùå No se encontraron datos de ventas para este per√≠odo")
            return
        
        # Resumen general
        print(f"\nüìä Resumen General:")
        print(f"   Total registros: {len(sales_data):,}")
        print(f"   SKUs √∫nicos: {sales_data['items_product_sku'].nunique():,}")
        print(f"   Clientes √∫nicos: {sales_data['customer_customerid'].nunique():,}")
        print(f"   Facturas √∫nicas: {sales_data['salesinvoiceid'].nunique():,}")
        
        # Ventas por SKU
        if 'items_quantity' in sales_data.columns:
            sales_by_sku = sales_data.groupby('items_product_sku').agg({
                'items_quantity': 'sum',
                'salesinvoiceid': 'nunique'
            }).round(2)
            sales_by_sku.columns = ['total_quantity', 'num_invoices']
            
            # Top 10 SKUs
            top_skus = sales_by_sku.nlargest(10, 'total_quantity')
            print(f"\nüèÜ Top 10 SKUs por Cantidad Vendida:")
            print("-" * 50)
            for i, (sku, row) in enumerate(top_skus.iterrows(), 1):
                print(f"   {i:2}. {sku}: {row['total_quantity']:8.1f} unidades ({row['num_invoices']} facturas)")
            
            # Estad√≠sticas
            total_quantity = sales_by_sku['total_quantity'].sum()
            avg_quantity = sales_by_sku['total_quantity'].mean()
            
            print(f"\nüìà Estad√≠sticas:")
            print(f"   Total cantidad vendida: {total_quantity:,.1f} unidades")
            print(f"   Promedio por SKU: {avg_quantity:.1f} unidades")
            print(f"   SKUs con ventas > 100: {len(sales_by_sku[sales_by_sku['total_quantity'] > 100])}")
            
            return sales_by_sku
        else:
            print("‚ö†Ô∏è  Columna 'items_quantity' no encontrada en los datos")
            print(f"   Columnas disponibles: {list(sales_data.columns)}")
            return sales_data
        
    except Exception as e:
        print(f"‚ùå Error analizando ventas: {e}")
        return None


def compare_sales_vs_forecast(year: int, month: int):
    """Comparar ventas reales vs forecasts para un mes."""
    
    print(f"\nüîÑ COMPARACI√ìN: VENTAS REALES vs FORECASTS")
    print("=" * 60)
    
    try:
        # Obtener ventas reales
        sales_data = get_sales_by_month(year, month)
        
        if sales_data.empty or 'items_quantity' not in sales_data.columns:
            print("‚ùå No hay datos de ventas v√°lidos para comparar")
            return
        
        real_by_sku = sales_data.groupby('items_product_sku')['items_quantity'].sum()
        
        # Obtener forecasts
        forecasts = get_forecasts_by_month(month)
        
        # Crear comparaci√≥n
        comparison = pd.DataFrame({
            'real_sales': real_by_sku,
            'forecast': pd.Series(forecasts)
        }).fillna(0)
        
        # Calcular m√©tricas
        comparison['difference'] = comparison['forecast'] - comparison['real_sales']
        comparison['abs_difference'] = abs(comparison['difference'])
        
        # Accuracy donde hay ventas reales
        mask = comparison['real_sales'] > 0
        comparison.loc[mask, 'accuracy'] = (
            1 - comparison.loc[mask, 'abs_difference'] / comparison.loc[mask, 'real_sales']
        ) * 100
        
        # Resumen
        total_real = comparison['real_sales'].sum()
        total_forecast = comparison['forecast'].sum()
        
        # Calcular m√©tricas adicionales
        avg_abs_difference = comparison['abs_difference'].mean()
        median_abs_difference = comparison['abs_difference'].median()
        
        print(f"üìä Resumen de Comparaci√≥n:")
        print(f"   Total ventas reales: {total_real:,.1f} unidades")
        print(f"   Total forecasts: {total_forecast:,.1f} unidades")
        print(f"   Diferencia total: {total_forecast - total_real:+,.1f} unidades")
        print(f"   Accuracy promedio: {comparison['accuracy'].mean():.1f}%")
        print(f"   Diferencia absoluta promedio: {avg_abs_difference:.1f} unidades")
        print(f"   Diferencia absoluta mediana: {median_abs_difference:.1f} unidades")
        
        # Top diferencias
        biggest_diffs = comparison.nlargest(5, 'abs_difference')
        print(f"\n‚ö†Ô∏è  Mayores Diferencias (Real vs Forecast):")
        print("-" * 55)
        for sku, row in biggest_diffs.iterrows():
            real = row['real_sales']
            forecast = row['forecast']
            diff = row['difference']
            print(f"   {sku}: Real {real:6.1f} | Forecast {forecast:6.1f} | Diff {diff:+7.1f}")
        
        return comparison
        
    except Exception as e:
        print(f"‚ùå Error en comparaci√≥n: {e}")
        return None


def main():
    """Funci√≥n principal de ejemplo."""
    
    print("üéØ An√°lisis de Ventas por Mes")
    print("=" * 50)
    
    # Ejemplo 1: Analizar ventas de enero 2024
    sales_summary = analyze_month_sales(2024, 1)
    
    # Ejemplo 2: Comparar con forecasts
    if sales_summary is not None:
        comparison = compare_sales_vs_forecast(2024, 1)
    
    # Ejemplo 3: M√∫ltiples meses
    print(f"\nüìä COMPARACI√ìN ESTACIONAL")
    print("=" * 50)
    
    months_to_analyze = [1, 4, 7, 10]  # Enero, Abril, Julio, Octubre
    month_names = ['', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                   'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
    
    for month in months_to_analyze:
        try:
            sales_data = get_sales_by_month(2024, month)
            if not sales_data.empty and 'items_quantity' in sales_data.columns:
                total_quantity = sales_data['items_quantity'].sum()
                unique_skus = sales_data['items_product_sku'].nunique()
                print(f"   {month_names[month]:12}: {total_quantity:8,.1f} unidades ({unique_skus} SKUs)")
            else:
                print(f"   {month_names[month]:12}: Sin datos")
        except Exception as e:
            print(f"   {month_names[month]:12}: Error - {e}")
    
    # Ejemplo 4: Calcular cantidades de producci√≥n para enero 2024
    print(f"\n" + "="*70)
    print("üè≠ EJEMPLO: C√ÅLCULO DE CANTIDADES DE PRODUCCI√ìN")
    print("="*70)
    production_df = calculate_production_quantities(2024, 1, use_test_odoo=False)


def calculate_production_quantities(year: int = None, month: int = None, use_test_odoo: bool = False):
    """
    Calcular la cantidad a producir por SKU basado en:
    Cantidad a producir = Forecast - Ventas del mes actual - Inventario actual
    
    Args:
        year (int): A√±o (por defecto usa el a√±o actual)
        month (int): Mes (por defecto usa el mes actual)
        use_test_odoo (bool): Si usar el entorno de test de Odoo (por defecto False)
    
    Returns:
        pd.DataFrame: Datos de producci√≥n requerida por SKU
    """
    from datetime import datetime
    
    # Usar fecha actual si no se especifica
    if year is None or month is None:
        current_date = datetime.now()
        year = year or current_date.year
        month = month or current_date.month
    
    month_names = ['', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                   'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
    
    print(f"\nüè≠ C√ÅLCULO DE PRODUCCI√ìN REQUERIDA - {month_names[month]} {year}")
    print("=" * 70)
    
    try:
        # 1. Obtener forecasts del mes
        print(f"üìà Obteniendo forecasts para {month_names[month]}...")
        forecasts = get_forecasts_by_month(month)
        if not forecasts:
            print("‚ùå No se encontraron forecasts para el mes especificado")
            return None
        
        # 2. Obtener ventas del mes actual
        print(f"üìä Obteniendo ventas de {month_names[month]} {year}...")
        sales_data = get_sales_by_month(year, month)
        
        if sales_data.empty or 'items_quantity' not in sales_data.columns:
            print("‚ùå No se encontraron datos de ventas v√°lidos")
            return None
        
        sales_by_sku = sales_data.groupby('items_product_sku')['items_quantity'].sum()
        
        # 3. Obtener inventario actual desde Odoo
        print(f"üì¶ Obteniendo inventario actual desde Odoo...")
        
        # Obtener configuraci√≥n de Odoo
        try:
            odoo_config = secrets.get_odoo_config(use_test=use_test_odoo)
            odoo_warehouse = OdooWarehouse(
                db=odoo_config['db'],
                url=odoo_config['url'],
                username=odoo_config['username'],
                password=odoo_config['password']
            )
        except Exception as e:
            print(f"‚ùå Error conectando a Odoo: {e}")
            print("üí° Nota: Se requiere configuraci√≥n de Odoo en config_manager")
            return None
        
        # Obtener todos los SKUs √∫nicos de forecasts y ventas
        all_skus = set(forecasts.keys()) | set(sales_by_sku.index)
        all_skus = list(all_skus)
        
        print(f"   Consultando inventario para {len(all_skus)} SKUs...")
        
        # Obtener inventario para todos los SKUs (usar batch para eficiencia)
        inventory_data = {}
        batch_size = 50  # Procesar en lotes para evitar timeouts
        
        for i in range(0, len(all_skus), batch_size):
            batch_skus = all_skus[i:i+batch_size]
            try:
                batch_inventory = odoo_warehouse.get_stock_by_sku(batch_skus)
                inventory_data.update(batch_inventory)
                print(f"   Procesado lote {i//batch_size + 1}/{(len(all_skus)-1)//batch_size + 1}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error en lote {i//batch_size + 1}: {e}")
                # Continuar con el siguiente lote
                continue
        
        # 4. Crear DataFrame de an√°lisis
        print(f"üî¢ Calculando cantidades de producci√≥n...")
        
        production_data = []
        for sku in all_skus:
            forecast_qty = forecasts.get(sku, 0)
            sales_qty = sales_by_sku.get(sku, 0)
            
            # Obtener inventario disponible
            inventory_info = inventory_data.get(sku, {})
            if inventory_info.get('found', False):
                inventory_qty = inventory_info.get('qty_available', 0)
                product_name = inventory_info.get('product_name', 'Sin nombre')
            else:
                inventory_qty = 0
                product_name = 'Producto no encontrado en Odoo'
            
            # Calcular cantidad a producir
            production_qty = forecast_qty - sales_qty - inventory_qty
            
            production_data.append({
                'sku': sku,
                'product_name': product_name,
                'forecast': forecast_qty,
                'current_sales': sales_qty,
                'inventory': inventory_qty,
                'production_needed': production_qty,
                'priority': 'ALTA' if production_qty > 100 else 'MEDIA' if production_qty > 20 else 'BAJA'
            })
        
        # Crear DataFrame inicial
        df_all_products = pd.DataFrame(production_data)
        
        # Filtrar productos no encontrados en Odoo
        print(f"üîç Filtrando productos...")
        products_not_found = df_all_products[df_all_products['product_name'] == 'Producto no encontrado en Odoo']
        df_production = df_all_products[df_all_products['product_name'] != 'Producto no encontrado en Odoo'].copy()
        
        # Mostrar estad√≠sticas de filtrado
        print(f"   üìä Total productos analizados: {len(df_all_products)}")
        print(f"   ‚úÖ Productos v√°lidos (encontrados en Odoo): {len(df_production)}")
        print(f"   ‚ùå Productos excluidos (no encontrados en Odoo): {len(products_not_found)}")
        
        if len(products_not_found) > 0:
            excluded_forecast = products_not_found['forecast'].sum()
            excluded_sales = products_not_found['current_sales'].sum()
            print(f"   üìà Forecast excluido: {excluded_forecast:,.0f} unidades")
            print(f"   üìä Ventas excluidas: {excluded_sales:,.0f} unidades")
        
        # Ordenar por cantidad de producci√≥n requerida
        df_production = df_production.sort_values('production_needed', ascending=False)
        
        # 5. Mostrar resultados (solo productos v√°lidos)
        print(f"\nüìã RESUMEN DE PRODUCCI√ìN (Solo productos v√°lidos):")
        print("-" * 70)
        
        total_forecast = df_production['forecast'].sum()
        total_sales = df_production['current_sales'].sum()
        total_inventory = df_production['inventory'].sum()
        total_production = df_production['production_needed'].sum()
        
        print(f"   Total Forecast: {total_forecast:,.1f} unidades")
        print(f"   Total Ventas del mes: {total_sales:,.1f} unidades")
        print(f"   Total Inventario actual: {total_inventory:,.1f} unidades")
        print(f"   Total Producci√≥n requerida: {total_production:,.1f} unidades")
        
        # Productos que requieren producci√≥n urgente
        urgent_production = df_production[df_production['production_needed'] > 0]
        
        if not urgent_production.empty:
            print(f"\nüö® TOP 15 PRODUCTOS REQUIEREN PRODUCCI√ìN:")
            print("-" * 90)
            print(f"{'SKU':<12} {'Forecast':<10} {'Ventas':<8} {'Stock':<8} {'Producir':<10} {'Prioridad':<10}")
            print("-" * 90)
            
            for _, row in urgent_production.head(15).iterrows():
                print(f"{row['sku']:<12} {row['forecast']:<10.1f} {row['current_sales']:<8.1f} "
                      f"{row['inventory']:<8.1f} {row['production_needed']:<10.1f} {row['priority']:<10}")
        
        # Productos con exceso de inventario
        excess_inventory = df_production[df_production['production_needed'] < -10]
        
        if not excess_inventory.empty:
            print(f"\nüì¶ PRODUCTOS CON EXCESO DE INVENTARIO:")
            print("-" * 90)
            print(f"{'SKU':<12} {'Forecast':<10} {'Ventas':<8} {'Stock':<8} {'Exceso':<10}")
            print("-" * 90)
            
            for _, row in excess_inventory.head(10).iterrows():
                excess = abs(row['production_needed'])
                print(f"{row['sku']:<12} {row['forecast']:<10.1f} {row['current_sales']:<8.1f} "
                      f"{row['inventory']:<8.1f} {excess:<10.1f}")
        
        # Estad√≠sticas por prioridad
        priority_stats = df_production[df_production['production_needed'] > 0].groupby('priority').agg({
            'production_needed': ['count', 'sum']
        }).round(1)
        
        if not priority_stats.empty:
            print(f"\nüìä ESTAD√çSTICAS POR PRIORIDAD:")
            print("-" * 40)
            for priority in ['ALTA', 'MEDIA', 'BAJA']:
                if priority in priority_stats.index:
                    count = priority_stats.loc[priority, ('production_needed', 'count')]
                    total = priority_stats.loc[priority, ('production_needed', 'sum')]
                    print(f"   {priority:<6}: {count:3.0f} productos, {total:8,.1f} unidades")
        
        return df_production
        
    except Exception as e:
        print(f"‚ùå Error calculando producci√≥n: {e}")
        return None


if __name__ == "__main__":
    main() 